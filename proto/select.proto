syntax = "proto2";

package tipb;

option java_multiple_files = true;
option java_package = "com.pingcap.tidb.tipb";

import "gogoproto/gogo.proto";
import "expression.proto";
import "schema.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// values are all in text format.
message Row {
	optional bytes handle = 1;
	optional bytes data = 2;
}

message Error {
	optional int32 code = 1 [(gogoproto.nullable) = false];
	optional string msg = 2 [(gogoproto.nullable) = false];
}

// Response for SelectRequest.
message SelectResponse {
	optional Error error = 1;

	// Result rows.
	repeated Row rows = 2;

	// Use multiple chunks to reduce memory allocation and
	// avoid allocating large contiguous memory.
	repeated Chunk chunks = 3 [(gogoproto.nullable) = false];
	repeated Error warnings = 4;
	repeated int64 output_counts = 5;
	optional int64 warning_count = 6;

	// Not used any more
	// optional bytes row_batch_data = 7 [(gogoproto.customtype) = "github.com/pingcap/tipb/sharedbytes.SharedBytes", (gogoproto.nullable) = false];

	// The execution summary of each executor, in the order in request.
	repeated ExecutorExecutionSummary execution_summaries = 8;
	// It indicates the encode type of response.
	optional EncodeType encode_type = 9 [(gogoproto.nullable) = false];
	// ndvs collects the number of distinct value information per range. It will be used to serve as execution feedback information.
	// Helping us improve the table's statistics information.
	repeated int64 ndvs = 10;
}

// Chunk contains multiple rows data and rows meta.
message Chunk {
	// Data for all rows in the chunk.
	optional bytes rows_data = 3 [(gogoproto.customtype) = "github.com/pingcap/tipb/sharedbytes.SharedBytes", (gogoproto.nullable) = false];

	// Meta data for every row.
	repeated RowMeta rows_meta = 4 [(gogoproto.nullable) = false];
}

// RowMeta contains row handle and length of a row.
message RowMeta {
	optional int64 handle = 1 [(gogoproto.nullable) = false];
	optional int64 length = 2 [(gogoproto.nullable) = false];
}

// DAGRequest represents the request that will be handled with DAG mode.
message DAGRequest {
	// Transaction start timestamp.
	// Deprecated. Start Ts has been moved to coprocessor.Request.
	optional uint64 start_ts_fallback = 1;

	// It represents push down Executors.
	repeated Executor executors = 2;

	// time zone offset in seconds
	optional int64 time_zone_offset = 3 [(gogoproto.nullable) = false];

	// flags are used to store flags that change the execution mode, it contains:
	//	ignore_truncate = 1
	//		truncate error should be ignore if set.
	//	truncate_as_warning = 1 << 1
	//		when ignored_truncate is not set, return warning instead of error if this flag is set.
	//	...
	//	add more when needed.
	optional uint64 flags = 4 [(gogoproto.nullable) = false];

	// It represents which columns we should output.
	repeated uint32 output_offsets = 5;

	// It represents whether we collect the detailed scan counts in each range.
	optional bool collect_range_counts = 6;

	// It indicates the maximum number of warning,
	// which is the number of messages that SHOW WARNINGS displays.
	optional uint64 max_warning_count = 7;

	// It indicates the encode type of response.
	optional EncodeType encode_type = 8 [(gogoproto.nullable) = false];

	// It indicates the sql_mode.
	optional uint64 sql_mode = 9;

	// It indicates whether the sql mode is strict.
	// Deprecated. Don't use.
	// optional bool is_strict_sql_mode = 10;

	// supply offset is not enough since we have daylight saving time present in some regions
	optional string time_zone_name = 11 [(gogoproto.nullable) = false];

	// It represents whether or not TiKV should collect execution summaries.
	// Execution summaries will be collected into `execution_summaries` field
	// in the response.
	optional bool collect_execution_summaries = 12;

	// Represents the maximum size of one packet, any generated string, or any parameter sent as long data.
	optional uint64 max_allowed_packet = 13;

	// Represents the chunk memory layout.
	optional ChunkMemoryLayout chunk_memory_layout = 14;

	// Represents whether the expression use RPN form.
	optional bool is_rpn_expr = 15;

	// UserIdentity uses to do privilege check. It is only used in TiDB cluster memory table.
	optional UserIdentity user = 16;
	
	// Represents tree struct based executors, if this field is set, should ignore the executors field, currently only used in TiFlash
	optional Executor root_executor = 17;
}

enum EncodeType {
	TypeDefault = 0;
	TypeChunk = 1;
	// TypeCHBlock is used by TiSpark and TiFlash, in this encode mode, TiFlash will encode the data using native ch block format
	TypeCHBlock = 2;
}

message ChunkMemoryLayout {
	// Represents the endian.
	optional Endian endian = 1 [(gogoproto.nullable) = false];
}

enum Endian {
	LittleEndian = 0;
	BigEndian = 1;
}

message UserIdentity {
	optional string user_name = 1 [(gogoproto.nullable) = false];
	optional string user_host = 2 [(gogoproto.nullable) = false];
}

message StreamResponse {
	optional Error error = 1;
	// Data for all rows
	optional bytes data = 3 [(gogoproto.customtype) = "github.com/pingcap/tipb/sharedbytes.SharedBytes", (gogoproto.nullable) = false];
	repeated Error warnings = 4;
	// output row count for each executor
	repeated int64 output_counts = 5;
	optional int64 warning_count = 6;
	repeated int64 ndvs = 7;
}

enum ExecType {
	TypeTableScan = 0;
	TypeIndexScan = 1;
	TypeSelection = 2;
	TypeAggregation = 3; // TODO: Rename it to hash aggregation after support stream aggregation in TiKV.
	TypeTopN = 4;
	TypeLimit = 5;
	TypeStreamAgg = 6;
	TypeJoin = 7;
	TypeKill = 8;
	TypeExchangeSender = 9;
	TypeExchangeReceiver = 10;
	TypeProjection = 11;
	TypeOneTripIndexLookup = 12;
}

// It represents a Executor.
message Executor {
	optional ExecType tp = 1 [(gogoproto.nullable) = false];
	optional TableScan tbl_scan = 2;
	optional IndexScan idx_scan = 3;
	optional Selection selection = 4;
	optional Aggregation aggregation = 5;
	optional TopN topN = 6;
	optional Limit limit = 7;
	optional ExchangeReceiver exchange_receiver = 8;
	optional Join join = 9;
	optional string executor_id = 10;
	optional Kill kill = 11;
	optional ExchangeSender exchange_sender = 12;
	optional Projection Projection = 13;
	optional OneTripIndexLookup one_trip_idx_lookup = 14;
}

enum ExchangeType {
	PassThrough = 0;
	Broadcast = 1;
	Hash = 2;
}

// ExchangeSender will build connection with ExchangeReceiver.
message ExchangeSender {
	optional ExchangeType tp = 1 [(gogoproto.nullable) = false];
	repeated bytes encoded_task_meta = 2;
	repeated Expr partition_keys = 3;
	optional Executor child = 4;
}

// ExchangeReceiver accept connection and receiver data from ExchangeSender.
message ExchangeReceiver {
	repeated bytes encoded_task_meta = 1;
	repeated FieldType field_types = 2;
}

enum EngineType {
	Local = 0;
	TiKV = 1;
	TiFlash = 2;
}

message OneTripIndexLookup {
	required DAGRequest idx_scan = 1;
	required DAGRequest tbl_scan = 2;
}

message TableScan {
	optional int64 table_id = 1 [(gogoproto.nullable) = false];
	repeated ColumnInfo columns = 2;
	optional bool desc = 3 [(gogoproto.nullable) = false];
	repeated int64 primary_column_ids = 4;
	optional EngineType next_read_engine = 5 [(gogoproto.nullable) = false]; // which engine we should in next step, only used by tiflash
	repeated KeyRange ranges = 6 [(gogoproto.nullable) = false]; // For global read in join, we must point out the key ranges when we don't have the region info.
}

enum JoinType {
	TypeInnerJoin = 0;
	TypeLeftOuterJoin = 1;
	TypeRightOuterJoin = 2;
	TypeSemiJoin = 3;
	TypeAntiSemiJoin = 4;
	TypeLeftOuterSemiJoin = 5;
	TypeAntiLeftOuterSemiJoin = 6;
}

enum JoinExecType {
	TypeHashJoin = 0;
}

message Join {
	optional JoinType join_type = 1 [(gogoproto.nullable) = false];
	optional JoinExecType join_exec_type = 2 [(gogoproto.nullable) = false];
	repeated Executor children = 3;
	optional int64 inner_idx = 4 [(gogoproto.nullable) = false]; // 0 or 1
	repeated Expr left_join_keys = 5;
	repeated Expr right_join_keys = 6;
	// used by TiFlash join when new collation is enabled.
	repeated FieldType probe_types = 7;
	repeated FieldType build_types = 8;
	repeated Expr left_conditions = 9;
	repeated Expr right_conditions = 10;
	repeated Expr other_conditions = 11;
}

message IndexScan {
	optional int64 table_id = 1 [(gogoproto.nullable) = false];
	optional int64 index_id = 2 [(gogoproto.nullable) = false];
	repeated ColumnInfo columns = 3;
	optional bool desc = 4 [(gogoproto.nullable) = false];
	optional bool unique = 5; // check whether it is a unique index.
	repeated int64 primary_column_ids = 6;
}

message Selection {
	// Where conditions.
	repeated Expr conditions = 1;
	repeated RpnExpr rpn_conditions = 2;
	optional Executor child = 3;
}

message Projection {
	// Projection expressions.
	repeated Expr exprs = 1;
	repeated RpnExpr rpn_exprs = 2;
	optional Executor child = 3;
}

message Aggregation {
	// Group by clause.
	repeated Expr group_by = 1;
	repeated RpnExpr rpn_group_by = 4;
	// Aggregate functions.
	repeated Expr agg_func = 2;
	repeated RpnExpr rpn_agg_func = 5;
	// If it is a stream aggregation.
	optional bool streamed = 3 [(gogoproto.nullable) = false];
	optional Executor child = 6;
}

message TopN {
	// Order by clause.
	repeated ByItem order_by = 1;
	optional uint64 limit = 2 [(gogoproto.nullable) = false];
	optional Executor child = 3;
}

message Limit {
	// Limit the result to be returned.
	optional uint64 limit = 1 [(gogoproto.nullable) = false];
	optional Executor child = 2;
}

message Kill {
	optional uint64 connID = 1 [(gogoproto.nullable) = false];

	// Query indicates whether terminate a single query on this connection or the whole connection.
	//   If Query is true, terminates the statement the connection is currently executing, but leaves the connection itself intact.
	//   If Query is false, terminates the connection associated with the given ConnectionID, after terminating any statement the connection is executing.
	//   See https://dev.mysql.com/doc/refman/8.0/en/kill.html.
	optional bool query = 2 [(gogoproto.nullable) = false];
}

message ExecutorExecutionSummary {
	// Total time cost in this executor. Includes self time cost and children time cost.
	optional uint64 time_processed_ns = 1;

	// How many rows this executor produced totally.
	optional uint64 num_produced_rows = 2;

	// How many times executor's `next()` is called.
	optional uint64 num_iterations = 3;

	// Coresponding executor id
	optional string executor_id = 4;

	// The execution concurrency for this executor
	optional uint64 concurrency = 5;
}
